#include <windows.h>  // for MS Windows
#include <GL/glut.h> // GLUT, include glu.h and gl.h
#include <math.h>
#include <iostream>
#include <cstring>
#include <stdlib.h> //random-num

using namespace std;



int _angle1 = 0;
int _carMove = 0;
int _carangle = 0;
float _angle2 = 1;
int _planeMove = 0;
bool isDay = true;
bool fullscreen = true;
bool isCarMoving = true;


void update(int value) //I001, I003-I008, I012, I015-018
{

    _angle1 += 1.0f;
    glutPostRedisplay(); //Notify GLUT that the display has changed

    glutTimerFunc(20, update, 0); //Notify GLUT to call update again in 25 milliseconds
}


void update1(int value)
{
    _angle2 -= 1.0f;
    glutPostRedisplay(); //Notify GLUT that the display has changed
    glutTimerFunc(20, update, 0); //Notify GLUT to call update again in 25 milliseconds
}

class CityScape
{
public:
    CityScape() {}
    void Building()
    {
        glMatrixMode(GL_MODELVIEW);

        glColor3ub(91, 0, 91);
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(250, 350);
        glVertex2f(200, 350);
        glVertex2f(200, 180);
        glVertex2f(250, 180);
        glEnd();
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(200, 300);
        glVertex2f(175, 300);
        glVertex2f(175, 180);
        glVertex2f(200, 180);
        glEnd();
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(150, 280);
        glVertex2f(175, 280);
        glVertex2f(175, 180);
        glVertex2f(150, 180);
        glEnd();
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(150, 320);
        glVertex2f(100, 320);
        glVertex2f(100, 180);
        glVertex2f(150, 180);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(100, 290);
        glVertex2f(50, 290);
        glVertex2f(50, 180);
        glVertex2f(100, 180);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(0, 320);
        glVertex2f(50, 320);
        glVertex2f(50, 180);
        glVertex2f(0, 180);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(275, 300);
        glVertex2f(325, 300);
        glVertex2f(325, 180);
        glVertex2f(275, 180);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(275, 260);
        glVertex2f(250, 260);
        glVertex2f(250, 180);
        glVertex2f(275, 180);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(325, 260);
        glVertex2f(350, 260);
        glVertex2f(350, 180);
        glVertex2f(325, 180);
        glEnd();

        glPushMatrix();
        glTranslatef(150, 0, 0);
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(250, 350);
        glVertex2f(200, 350);
        glVertex2f(200, 180);
        glVertex2f(250, 180);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(225, 0, 0);
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(200, 300);
        glVertex2f(175, 300);
        glVertex2f(175, 180);
        glVertex2f(200, 180);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(275, 0, 0);
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(150, 280);
        glVertex2f(175, 280);
        glVertex2f(175, 180);
        glVertex2f(150, 180);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(350, 0, 0);
        glBegin(GL_POLYGON); //repetitive
        glVertex2f(150, 320);
        glVertex2f(100, 320);
        glVertex2f(100, 180);
        glVertex2f(150, 180);
        glEnd();
        glPopMatrix();

        //Borders
        glLineWidth(1);
        glColor3f(0.0f, 0.0f, 0.0f);
        glBegin(GL_LINES);
        glVertex2f(250, 350);
        glVertex2f(200, 350);
        glVertex2f(200, 350);
        glVertex2f(200, 180);
        glVertex2f(200, 180);
        glVertex2f(250, 180);
        glVertex2f(250, 180);
        glVertex2f(250, 350);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(200, 300);
        glVertex2f(175, 300);
        glVertex2f(175, 300);
        glVertex2f(175, 180);
        glVertex2f(175, 180);
        glVertex2f(200, 180);
        glVertex2f(200, 180);
        glVertex2f(200, 300);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(150, 280);
        glVertex2f(175, 280);
        glVertex2f(175, 280);
        glVertex2f(175, 180);
        glVertex2f(175, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 280);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(150, 320);
        glVertex2f(100, 320);
        glVertex2f(100, 320);
        glVertex2f(100, 180);
        glVertex2f(100, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 320);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(100, 290);
        glVertex2f(50, 290);
        glVertex2f(50, 290);
        glVertex2f(50, 180);
        glVertex2f(50, 180);
        glVertex2f(100, 180);
        glVertex2f(100, 180);
        glVertex2f(100, 290);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(0, 320);
        glVertex2f(50, 320);
        glVertex2f(50, 320);
        glVertex2f(50, 180);
        glVertex2f(50, 180);
        glVertex2f(0, 180);
        glVertex2f(0, 180);
        glVertex2f(0, 320);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(275, 300);
        glVertex2f(325, 300);
        glVertex2f(325, 300);
        glVertex2f(325, 180);
        glVertex2f(325, 180);
        glVertex2f(275, 180);
        glVertex2f(275, 180);
        glVertex2f(275, 300);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(275, 260);
        glVertex2f(250, 260);
        glVertex2f(250, 260);
        glVertex2f(250, 180);
        glVertex2f(250, 180);
        glVertex2f(275, 180);
        glVertex2f(275, 180);
        glVertex2f(275, 260);
        glEnd();
        glBegin(GL_LINES);
        glVertex2f(325, 260);
        glVertex2f(350, 260);
        glVertex2f(350, 260);
        glVertex2f(350, 180);
        glVertex2f(350, 180);
        glVertex2f(325, 180);
        glVertex2f(325, 180);
        glVertex2f(325, 260);
        glEnd();

        glPushMatrix();
        glTranslatef(150, 0, 0);
        glBegin(GL_LINES); //repetitive
        glVertex2f(250, 350);
        glVertex2f(200, 350);
        glVertex2f(200, 350);
        glVertex2f(200, 180);
        glVertex2f(200, 180);
        glVertex2f(250, 180);
        glVertex2f(250, 180);
        glVertex2f(250, 350);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(225, 0, 0);
        glBegin(GL_LINES); //repetitive
        glVertex2f(200, 300);
        glVertex2f(175, 300);
        glVertex2f(175, 300);
        glVertex2f(175, 180);
        glVertex2f(175, 180);
        glVertex2f(200, 180);
        glVertex2f(200, 180);
        glVertex2f(200, 300);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(275, 0, 0);
        glBegin(GL_LINES); //repetitive
        glVertex2f(150, 280);
        glVertex2f(175, 280);
        glVertex2f(175, 280);
        glVertex2f(175, 180);
        glVertex2f(175, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 280);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(350, 0, 0);
        glBegin(GL_LINES); //repetitive
        glVertex2f(150, 320);
        glVertex2f(100, 320);
        glVertex2f(100, 320);
        glVertex2f(100, 180);
        glVertex2f(100, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 180);
        glVertex2f(150, 320);
        glEnd();
        glPopMatrix();
    }

    void Detail_1(float x, float y)
    {
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(45 + x, 5 + y);
        glVertex2f(0 + x, 5 + y);
        glVertex2f(0 + x, y);
        glVertex2f(45 + x, y);
        glEnd();
    }
    void Detail_2(float x, float y)
    {
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(55 + x, 10 + y);
        glVertex2f(95 + x, 10 + y);
        glVertex2f(95 + x, y);
        glVertex2f(55 + x, y);
        glEnd();
    }
    void Detail_3(float x, float y)
    {
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(97 + x, 3 + y);
        glVertex2f(100 + x, 3 + y);
        glVertex2f(100 + x, y);
        glVertex2f(97 + x, y);
        glEnd();
    }

    void Detail_4(float x, float y)
    {
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(7 + x, y + 180);
        glVertex2f(7 + x, y + 315);
        glVertex2f(x, y + 315);
        glVertex2f(x, y + 180);
        glEnd();
    }
    void Detail_5(float x, float y)
    {
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(170 + x, 5 + y);
        glVertex2f(155 + x, 5 + y);
        glVertex2f(155 + x, y);
        glVertex2f(170 + x, y);
        glEnd();
    }
    void Detail_6(float x, float y)
    {
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(3 + x, y + 180);
        glVertex2f(3 + x, y + 295);
        glVertex2f(x, y + 295);
        glVertex2f(x, y + 180);
        glEnd();
    }
    void Detail_7(float x, float y)
    {
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(222 + x, 5 + y);
        glVertex2f(205 + x, 5 + y);
        glVertex2f(205 + x, y);
        glVertex2f(222 + x, y);
        glEnd();
    }
    void Details()
    {
        glMatrixMode(GL_MODELVIEW);

        //Building_1//C001
        glColor3ub(91, 0, 91);
        glBegin(GL_POLYGON);
        glVertex2f(0, 340);
        glVertex2f(50, 340);
        glVertex2f(50, 330);
        glVertex2f(0, 330);
        glEnd();
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(0, 320);
        glVertex2f(40, 320);
        glVertex2f(40, 330);
        glVertex2f(0, 330);
        glEnd();
        for (int i = 180; i < 311; i++)
        {
            if (i % 10 == 0)
            {
                Detail_1(0, i);
            }
        }

        //building_2//C002
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(50, 315);
        glVertex2f(55, 315);
        glVertex2f(55, 290);
        glVertex2f(50, 290);
        glEnd();
        for (int i = 180; i < 281; i++)
        {
            if (i % 15 == 0)
            {
                Detail_2(0, i + 5);
            }
        }

        //Building_3//C003
        glColor3ub(91, 0, 91);
        glBegin(GL_POLYGON);
        glVertex2f(105, 330);
        glVertex2f(120, 330);
        glVertex2f(120, 320);
        glVertex2f(105, 320);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(145, 330);
        glVertex2f(130, 330);
        glVertex2f(130, 320);
        glVertex2f(145, 320);
        glEnd();
        for (int i = 290; i < 320; i++)
        {
            if (i % 5 == 0)
            {
                Detail_3(0, i);
            }
        }
        for (int i = 280; i < 320; i++)
        {
            if (i % 5 == 0)
            {
                Detail_3(53, i);
            }
        }
        for (int i = 100; i < 145; i++)
        {
            if (i % 10 == 0)
            {
                Detail_4(i + 1, 0);
            }
        }
        //Building_4//C004
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(160, 288);
        glVertex2f(175, 288);
        glVertex2f(175, 280);
        glVertex2f(160, 280);
        glEnd();
        for (int i = 180; i < 275; i++)
        {
            if (i % 10 == 0)
            {
                Detail_5(0, i);
            }
        }
        //Building_5//C005
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(200, 305);
        glVertex2f(173, 305);
        glVertex2f(173, 300);
        glVertex2f(200, 300);
        glEnd();
        for (int i = 175; i < 200; i++)
        {
            if (i % 5 == 0)
            {
                Detail_6(i + 1, 0);
            }
        }
        //Building_6//C006
        for (int i = 300; i < 350; i++)
        {
            if (i % 5 == 0)
            {
                Detail_3(100, i);
            }
        }
        for (int i = 300; i < 350; i++)
        {
            if (i % 5 == 0)
            {
                Detail_3(153, i);
            }
        }
        for (int i = 180; i < 350; i++)
        {
            if (i % 10 == 0)
            {
                Detail_7(0, i);
            }
        }
        for (int i = 180; i < 350; i++)
        {
            if (i % 10 == 0)
            {
                Detail_7(24, i);
            }
        }

        //Building_7//C013
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(250, 260);
        glVertex2f(258, 260);
        glVertex2f(258, 295);
        glVertex2f(250, 295);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(253, 185);
        glVertex2f(272, 185);
        glVertex2f(272, 255);
        glVertex2f(253, 255);
        glEnd();

        //Building_8//C008
        glColor3ub(91, 0, 91);
        glBegin(GL_POLYGON);
        glVertex2f(275, 315);
        glVertex2f(325, 315);
        glVertex2f(325, 310);
        glVertex2f(275, 310);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(275, 295);
        glVertex2f(267, 295);
        glVertex2f(267, 285);
        glVertex2f(275, 285);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(275, 270);
        glVertex2f(267, 270);
        glVertex2f(267, 280);
        glVertex2f(275, 280);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(325, 295);
        glVertex2f(333, 295);
        glVertex2f(333, 285);
        glVertex2f(325, 285);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(325, 270);
        glVertex2f(333, 270);
        glVertex2f(333, 280);
        glVertex2f(325, 280);
        glEnd();

        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(280, 300);
        glVertex2f(320, 300);
        glVertex2f(320, 310);
        glVertex2f(280, 310);
        glEnd();
        for (int i = 275; i < 325; i++)
        {
            if (i % 5 == 0)
            {
                Detail_6(i + 1, 0);
            }
        }

        //Building_9//C009
        glPushMatrix();
        glTranslatef(92, 0, 0);
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(250, 260);
        glVertex2f(258, 260);
        glVertex2f(258, 295);
        glVertex2f(250, 295);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(75, 0, 0);
        glBegin(GL_POLYGON);
        glVertex2f(253, 185);
        glVertex2f(272, 185);
        glVertex2f(272, 255);
        glVertex2f(253, 255);
        glEnd();
        glPopMatrix();

        //Building_10//C010
        glPushMatrix();
        glTranslatef(203, 0, 0);
        for (int i = 300; i < 350; i++)
        {
            if (i % 5 == 0)
            {
                Detail_3(100, i);
            }
        }
        glPopMatrix();
        glPushMatrix();
        glTranslatef(97, 0, 0);
        for (int i = 300; i < 350; i++)
        {
            if (i % 5 == 0)
            {
                Detail_3(153, i);
            }
        }
        glPopMatrix();
        glPushMatrix();
        glTranslatef(150, 0, 0);
        for (int i = 180; i < 350; i++)
        {
            if (i % 10 == 0)
            {
                Detail_7(0, i);
            }
        }
        glPopMatrix();
        glPushMatrix();
        glTranslatef(150, 0, 0);
        for (int i = 180; i < 350; i++)
        {
            if (i % 10 == 0)
            {
                Detail_7(24, i);
            }
        }
        glPopMatrix();
        //Building_11//C011
        glPushMatrix();
        glTranslatef(227, 0, 0);
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(200, 305);
        glVertex2f(173, 305);
        glVertex2f(173, 300);
        glVertex2f(200, 300);
        glEnd();
        glPopMatrix();
        glPushMatrix();
        glTranslatef(225, 0, 0);
        for (int i = 175; i < 200; i++)
        {
            if (i % 5 == 0)
            {
                Detail_6(i + 1, 0);
            }
        }
        glPopMatrix();
        //Building_12//C012
        glPushMatrix();
        glTranslatef(275, 0, 0);
        glColor3ub(55, 0, 55);
        glBegin(GL_POLYGON);
        glVertex2f(160, 288);
        glVertex2f(175, 288);
        glVertex2f(175, 280);
        glVertex2f(160, 280);
        glEnd();
        for (int i = 180; i < 275; i++)
        {
            if (i % 10 == 0)
            {
                Detail_5(0, i);
            }
        }
        glPopMatrix();
        //Building_13//C014
        glPushMatrix();
        glTranslatef(350, 0, 0);
        glColor3ub(91, 0, 91);
        glBegin(GL_POLYGON);
        glVertex2f(105, 330);
        glVertex2f(120, 330);
        glVertex2f(120, 320);
        glVertex2f(105, 320);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(145, 330);
        glVertex2f(130, 330);
        glVertex2f(130, 320);
        glVertex2f(145, 320);
        glEnd();
        for (int i = 290; i < 320; i++)
        {
            if (i % 5 == 0)
            {
                Detail_3(0, i);
            }
        }
        for (int i = 100; i < 145; i++)
        {
            if (i % 10 == 0)
            {
                Detail_4(i + 1, 0);
            }
        }
        glPopMatrix();
    }
    void CityView() //C000
    {
        Building();
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(0, -28, 0);
        glPopMatrix();
        Details();
        glFlush(); // Render now
    }
};
void displayCity() //C000
{
    CityScape obj;
    obj.CityView();
}

/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv)
{
    glutInit(&argc, argv); // Initialize GLUT
    glutCreateWindow("Journey By Car Animation"); // Create a window with the given title
    gluOrtho2D(0, 500, 0, 500);
    glutFullScreen();
    glutDisplayFunc(displayCity);          // Register display callback handler for window re-paint


    glutMainLoop(); // Enter the event-processing loop
    return 0;
}
