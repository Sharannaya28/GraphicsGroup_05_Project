#include <windows.h>  // for MS Windows
#include <GL/glut.h> // GLUT, include glu.h and gl.h
#include <math.h>
#include <iostream>
#include <cstring>
#include <stdlib.h> //random-num

using namespace std;



int _angle1 = 0;
float _angle2 = 1;
int _planeMove = 0;
bool isDay = true;
bool fullscreen = true;

void update(int value) //I001, I003-I008, I012, I015-018
{

    _angle1 += 1.0f;
    glutPostRedisplay(); //Notify GLUT that the display has changed

    glutTimerFunc(20, update, 0); //Notify GLUT to call update again in 25 milliseconds
}


void update1(int value)
{
    _angle2 -= 1.0f;
    glutPostRedisplay(); //Notify GLUT that the display has changed
    glutTimerFunc(20, update, 0); //Notify GLUT to call update again in 25 milliseconds
}

class CityScape
{
public:
    CityScape() {}
    void star() //C018
    {
        glLineWidth(2);
        glBegin(GL_LINES);
        glColor3ub(255, 251, 251); //white-star
        glVertex2f(-0.075, 0);
        glVertex2f(0.075, 0);

        glVertex2f(-0.05, -0.075);
        glVertex2f(0.05, 0.075);

        glVertex2f(0.05, -0.075);
        glVertex2f(-0.05, 0.075);

        glVertex2f(0, -0.1);
        glVertex2f(0, 0.1);

        glEnd();
    }
    void scaledstar()
    {
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(05, 490, 0);
        glScalef(15, 15, 0);
        star();
        glPopMatrix();
    }
    void scaledstarLoop()
    {
        scaledstar();
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(5, 0, 0);

        for (int i = 0; i < 3; i++)
        {
            glTranslatef(0, -20, 0);
            scaledstar();
            for (int i = 0; i < 40; i++)
            {
                if (i % 2 == 0)
                {
                    glTranslatef(15, -35, 0);
                    scaledstar();
                }
                else
                {
                    glTranslatef(18, 35, 0);
                    scaledstar();
                }
            }
            glTranslatef(-660, -35, 0);
        }
        glPopMatrix();
    }
    void sky() //C017
    {
        glBegin(GL_QUADS);
        glColor3ub(7, 11, 52);
        glVertex2f(0, 300);
        glColor3ub(0, 0, 55);
        glVertex2f(500, 300);
        glColor3ub(43, 47, 19);
        glVertex2f(500, 500);
        glColor3ub(20, 24, 82);
        glVertex2f(0, 500);
        glEnd();
        scaledstarLoop();
    }
    void circle(int xx, int yy, float r)
    {

        glBegin(GL_POLYGON); // Draw a Red 1x1 Square centered at origin
        for (int i = 0; i < 200; i++)
        {
            float pi = 3.1416;
            float A = (i * 2 * pi) / 200;
            // float r = 4.0f;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x + xx, y + yy);
        }
        glEnd();
    }
    void Background() //C030
    {
        glColor3ub(210, 0, 105);
        glBegin(GL_POLYGON);
        glVertex2f(0, 180);
        glVertex2f(25, 180);
        glVertex2f(25, 380);
        glVertex2f(0, 380);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(25, 180);
        glVertex2f(45, 180);
        glVertex2f(45, 360);
        glVertex2f(25, 360);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(80, 180);
        glVertex2f(45, 180);
        glVertex2f(45, 390);
        glVertex2f(80, 390);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(80, 180);
        glVertex2f(105, 180);
        glVertex2f(105, 345);
        glVertex2f(80, 345);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(105, 180);
        glVertex2f(125, 180);
        glVertex2f(125, 375);
        glVertex2f(105, 375);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(150, 180);
        glVertex2f(125, 180);
        glVertex2f(125, 420);
        glVertex2f(150, 420);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(150, 180);
        glVertex2f(170, 180);
        glVertex2f(170, 350);
        glVertex2f(150, 350);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(170, 180);
        glVertex2f(195, 180);
        glVertex2f(195, 410);
        glVertex2f(170, 410);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(215, 180);
        glVertex2f(195, 180);
        glVertex2f(195, 380);
        glVertex2f(215, 380);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(215, 180);
        glVertex2f(240, 180);
        glVertex2f(240, 415);
        glVertex2f(215, 415);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(240, 180);
        glVertex2f(265, 180);
        glVertex2f(265, 360);
        glVertex2f(240, 360);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(265, 180);
        glVertex2f(295, 180);
        glVertex2f(295, 425);
        glVertex2f(265, 425);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(295, 180);
        glVertex2f(315, 180);
        glVertex2f(315, 390);
        glVertex2f(295, 390);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(315, 180);
        glVertex2f(340, 180);
        glVertex2f(340, 360);
        glVertex2f(315, 360);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(365, 180);
        glVertex2f(340, 180);
        glVertex2f(340, 390);
        glVertex2f(365, 390);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(395, 180);
        glVertex2f(365, 180);
        glVertex2f(365, 425);
        glVertex2f(395, 425);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(395, 180);
        glVertex2f(415, 180);
        glVertex2f(415, 360);
        glVertex2f(395, 360);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(435, 180);
        glVertex2f(415, 180);
        glVertex2f(415, 400);
        glVertex2f(435, 400);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(435, 180);
        glVertex2f(460, 180);
        glVertex2f(460, 340);
        glVertex2f(435, 340);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(460, 180);
        glVertex2f(485, 180);
        glVertex2f(485, 425);
        glVertex2f(460, 425);
        glEnd();
        glBegin(GL_POLYGON);
        glVertex2f(500, 180);
        glVertex2f(485, 180);
        glVertex2f(485, 380);
        glVertex2f(500, 380);
        glEnd();
    }
    void cloud()
    {
        glMatrixMode(GL_MODELVIEW);

        glPushMatrix();
        glTranslatef(20, 95.5, 0);
        circle();

        glTranslatef(15, 2.5, 0);
        circle();

        glTranslatef(20, 5, 0);
        circle();

        glTranslatef(30, 2.5, 0);
        circle();

        glTranslatef(0, -2.5, 0);
        circle();

        glPopMatrix();

    }

    void movingCloude() //V504s
    {
        glPushMatrix();
        glTranslatef(100, 400, 0);

        glMatrixMode(GL_MODELVIEW);
        glScalef(0.5, 0.5, 1);
        cloud();
        glTranslatef(200, 35, 0);
        cloud();

        glTranslatef((_angle1 / 2) % 1000, 0, 0);
        glTranslatef(-100, 0, 0);
        cloud();
        glTranslatef(200, 35, 0);
        cloud();

        glPopMatrix();
    }

    void plane() //C050s
    {
        glPushMatrix();
        glTranslatef(-142.5, 450, 0);
        glScalef(0.3, 0.4, 1);
        glTranslatef((_angle1) % 2500, 0, 0);
        glColor3f(1.0, 1.0, 1.0);
        glBegin(GL_POLYGON); //rectangular body
        glVertex2f(0.0, 30.0);
        glVertex2f(0.0, 55.0);
        glVertex2f(135.0, 55.0);
        glVertex2f(135.0, 30.0);
        glEnd();

        glColor3f(1.0, 1.0, 1.0);
        glBegin(GL_POLYGON); //upper triangle construction plane
        glVertex2f(135.0, 55.0);
        glVertex2f(150.0, 50.0);
        glVertex2f(155.0, 45.0);
        glVertex2f(160.0, 40.0);
        glVertex2f(135.0, 40.0);
        glEnd();

        glColor3f(0.0, 0.0, 0.0);
        glBegin(GL_LINE_LOOP); //outline of upper triangle plane
        glVertex2f(135.0, 55.0);
        glVertex2f(150.0, 50.0);
        glVertex2f(155.0, 45.0);
        glVertex2f(160.0, 40.0);
        glVertex2f(135.0, 40.0);
        glEnd();

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //lower triangle
        glVertex2f(135.0, 40.0);
        glVertex2f(160.0, 40.0);
        glVertex2f(160.0, 37.0);
        glVertex2f(145.0, 30.0);
        glVertex2f(135.0, 30.0);
        glEnd();

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //back wing
        glVertex2f(0.0, 55.0);
        glVertex2f(0.0, 80.0);
        glVertex2f(10.0, 80.0);
        glVertex2f(40.0, 55.0);
        glEnd();


        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //left side wing
        glVertex2f(65.0, 55.0);
        glVertex2f(50.0, 70.0);
        glVertex2f(75.0, 70.0);
        glVertex2f(90.0, 55.0);
        glEnd();

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //rightside wing
        glVertex2f(70.0, 40.0);
        glVertex2f(100.0, 40.0);
        glVertex2f(80.0, 15.0);
        glVertex2f(50.0, 15.0);

        glEnd();

        glPopMatrix();
    }
    void CityView() //C000
    {
        sky();
        Background();
        movingCloude();
        plane();
        Building();
        glFlush(); // Render now
    }
};
void displayCity() //C000
{
    CityScape obj;
    obj.CityView();
}

/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv)
{
    glutInit(&argc, argv); // Initialize GLUT
    glutInitWindowSize(640, 640);
    glutCreateWindow("Journey By Car Animation"); // Create a window with the given title
    gluOrtho2D(0, 500, 0, 500);
    glutFullScreen();
    glutDisplayFunc(displayCity);          // Register display callback handler for window re-paint


    glutMainLoop(); // Enter the event-processing loop
    return 0;
}