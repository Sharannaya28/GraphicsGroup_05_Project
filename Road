#include <windows.h>  // for MS Windows
#include <GL/glut.h> // GLUT, include glu.h and gl.h
#include <math.h>
#include <iostream>
#include <cstring>
#include <stdlib.h> //random-num

using namespace std;



int _angle1 = 0;
int _carMove = 0;
int _carangle = 0;
float _angle2 = 1;
int _planeMove = 0;
bool isDay = true;
bool fullscreen = true;
bool isCarMoving = true;




class CityScape
{
public:
    CityScape() {}
    void Road() //C019
    {
        int x = 0, y = 0;
        glColor3ub(15, 15, 10); // Clear the color buffer (background)
        glBegin(GL_POLYGON);    // Draw a Red 1x1 Square centered at origin
        glVertex2f(0, 200);
        glVertex2f(500, 200);
        glVertex2f(500, 80);
        glVertex2f(0, 80);

        glEnd();
        glBegin(GL_LINES);
        glColor3ub(255, 255, 255);
        glVertex2f(x, 140);
        glVertex2f(y + 45, 140);
        glEnd();

        glBegin(GL_LINES);
        glColor3ub(255, 255, 255);
        glVertex2f(x + 90, 140);
        glVertex2f(y + 135, 140);
        glEnd();

        glBegin(GL_LINES);
        glColor3ub(255, 255, 255);
        glVertex2f(x + 180, 140);
        glVertex2f(y + 225, 140);
        glEnd();

        glBegin(GL_LINES);
        glColor3ub(255, 255, 255);
        glVertex2f(x + 270, 140);
        glVertex2f(y + 315, 140);
        glEnd();

        glBegin(GL_LINES);
        glColor3ub(255, 255, 255);
        glVertex2f(x + 360, 140);
        glVertex2f(y + 405, 140);
        glEnd();

        glBegin(GL_LINES);
        glColor3ub(255, 255, 255);
        glVertex2f(x + 450, 140);
        glVertex2f(y + 495, 140);
        glEnd();
    }

    void yellow(int x, int y) //C020

    {
        glColor3ub(255, 255, 4);
        glBegin(GL_POLYGON);
        glVertex2f(5 + x, 8 + y);
        glVertex2f(0 + x, 8 + y);
        glVertex2f(0 + x, y);
        glVertex2f(5 + x, y);
        glEnd();
    }
    void Roadside() //C020
    {
        glColor3ub(128, 128, 128);
        glBegin(GL_POLYGON);
        glVertex2f(0, 180);
        glVertex2f(0, 172);
        glVertex2f(500, 172);
        glVertex2f(500, 180);
        glEnd();
        for (int i = 0; i < 500; i++)
        {
            if (i % 10 == 0)
            {
                yellow(i, 172);
            }
        }
    }
    void Roadside2() //C020
    {
        Roadside();
        glPushMatrix();
        glTranslatef(0.0f, -124.0f, 0.0f);
        Roadside();
        glPopMatrix();
    }
    void Crossing(float x, float y)
    {
        glColor3ub(255, 255, 255); // Clear the color buffer (background)
        glBegin(GL_POLYGON);       // Draw a Red 1x1 Square centered at origin
        glVertex2f(43 + x, 10.2 + y);
        glVertex2f(63 + x, 10.2 + y);
        glVertex2f(63 + x, 14.5 + y);
        glVertex2f(43 + x, 14.5 + y);
        glEnd();
    }

    void StreetLight()
    {
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(-100.0f, 40.0f, 0.0f);
        glScalef(0.5, 1, 0);
        glBegin(GL_QUADS);
        glColor3ub(67.0f, 70.0f, 75.0f); //steel-blue-pillar
        glVertex2f(250, 20);
        glVertex2f(255, 20);
        glVertex2f(255, 140);
        glVertex2f(250, 140);
        glEnd();

        glBegin(GL_QUADS);
        glColor3ub(67.0f, 70.0f, 75.0f); //steel-blue-pillar-base-holder
        glVertex2f(248, 45);
        glVertex2f(257, 45);
        glVertex2f(260, 20);
        glVertex2f(245, 20);
        glEnd();

        glBegin(GL_QUADS);
        glColor3ub(67.0f, 70.0f, 75.0f); //steel-blue-holder-p1
        glVertex2f(250, 140);
        glVertex2f(255, 140);
        glVertex2f(270, 170);
        glVertex2f(265, 170);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3ub(67.0f, 70.0f, 75.0f); //steel-blue-holder-p2
        glVertex2f(264, 170);
        glVertex2f(310, 170);
        glVertex2f(305, 175);
        glVertex2f(269, 175);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3ub(67.0f, 70.0f, 75.0f); //steel-blue-holder-p3
        glVertex2f(285, 170);
        glVertex2f(285, 165);
        glVertex2f(310, 165);
        glVertex2f(310, 170);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3ub(255.0f, 255.0f, 48); //bright-yellow-light
        if (isDay)
        glColor3ub(255, 255, 250); //bright-white-light
        glVertex2f(285, 165);
        glVertex2f(310, 165);
        glVertex2f(300, 155);
        glVertex2f(290, 158);
        glEnd();

        glPopMatrix(); // Render now
    }

    void scaledlight() //C026
    {
        int i;
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glScalef(0.6, 0.6, 0.0);
        StreetLight();

        for (i = 1; i < 50;)
        {
            glTranslatef(150, 0, 0);
            StreetLight();
            i += 10;
        }
        glPopMatrix();
    }
    void scaledlight1() //C026
    {
        int i;
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glScalef(0.3, 0.3, 0.0);
        glTranslatef(0, 540, 0);
        StreetLight();
        glTranslatef(0, -540, 0);

        for (i = 1; i < 110;)
        {
            glTranslatef(150, 540, 0);
            StreetLight();
            glTranslatef(0, -540, 0);
            i += 10;
        }
        glPopMatrix();
    }
    void CityView() //C000
    {

        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(0, -28, 0);
        Road();
        glPopMatrix();
        Crossing(200, 150);
        Crossing(200, 130);
        Crossing(200, 110);
        Crossing(200, 90);
        Crossing(200, 70);
        Crossing(200, 50);
        Roadside2();
        scaledlight();
        scaledlight1();
        glFlush(); // Render now
    }
};
void displayCity() //C000
{
    CityScape obj;
    obj.CityView();
}

/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv)
{
    glutInit(&argc, argv); // Initialize GLUT

    glutCreateWindow("Journey By Car Animation"); // Create a window with the given title
    gluOrtho2D(0, 500, 0, 500);
    glutFullScreen();
    glutDisplayFunc(displayCity);          // Register display callback handler for window re-paint




    glutMainLoop(); // Enter the event-processing loop
    return 0;
}
