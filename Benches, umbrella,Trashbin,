#include <windows.h>  // for MS Windows
#include <GL/glut.h> // GLUT, include glu.h and gl.h
#include <math.h>
#include <iostream>
#include <cstring>
#include <stdlib.h> //random-num

using namespace std;

class CityScape
{
public:
    CityScape() {}

    void bench() //C023
    {
        glLineWidth(12);
        float y1 = 45.5;
        float y2 = 47.5;
        //colors
        glPushMatrix();
        glTranslatef(300, 130, 0);
        glScalef(2.5, 1.8, 0);

        glBegin(GL_QUADS); //sitting 2.0
        glColor3ub(204, 102, 0);
        glVertex2f(44, -60);
        glVertex2f(64, -60);
        glVertex2f(64, -58);
        glVertex2f(44, -58);

        glEnd();

        glBegin(GL_QUADS); //sitting 1.0
        glColor3ub(204, 102, 0);
        glVertex2f(45, -58);
        glVertex2f(63, -58);
        glVertex2f(63, -57);
        glVertex2f(45, -57);

        glEnd();

        glBegin(GL_QUADS);
        glColor3ub(102, 51, 0);
        glVertex2f(46, -70);
        glVertex2f(48, -70);
        glVertex2f(48, -60);
        glVertex2f(46, -60);

        glEnd();

        glBegin(GL_QUADS);
        glColor3ub(102, 51, 0);
        glVertex2f(60, -70);
        glVertex2f(62, -70);
        glVertex2f(62, -60);
        glVertex2f(60, -60);

        glEnd();

        glBegin(GL_QUADS); //2
        glColor3ub(204, 102, 0);
        for (int i = 0; i < 3; i++)
        {
            glVertex2f(45.5, -y1);
            glVertex2f(45.5, -y2);
            glVertex2f(62.5, -y2);
            glVertex2f(62.5, -y1);

            y1 += 3;
            y2 += 3;
        }

        glEnd();

        glBegin(GL_QUADS); //1.1
        glColor3ub(102, 51, 0);
        glVertex2f(46.5, -60);
        glVertex2f(48, -60);
        glVertex2f(48, -45);
        glVertex2f(46.5, -45);

        glEnd();

        glBegin(GL_QUADS); //1.2
        glColor3ub(102, 51, 0);
        glVertex2f(60, -60);
        glVertex2f(61.5, -60);
        glVertex2f(61.5, -45);
        glVertex2f(60, -45);
        glEnd();
        glTranslatef(-300, -130, 0);
        glPopMatrix();

    }
    void bench2() //C023
    {
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(-370, 0, 0);
        bench();
        glTranslatef(370, 0, 0);
        glPopMatrix();
    }
    void footpath()
    {
        glBegin(GL_QUADS);
        glColor3ub(31, 46, 46);
        glVertex2f(0, 48);
        glVertex2f(500, 48);
        glVertex2f(500, 0);
        glVertex2f(0, 0);
        glEnd();
    }
    void traffic() //C025
    {
        glBegin(GL_QUADS);
        glColor3ub(67.0f, 70.0f, 75.0f);
        glVertex2f(250, 20);
        glVertex2f(255, 20);
        glVertex2f(255, 140);
        glVertex2f(250, 140);
        glEnd();

        glBegin(GL_QUADS);
        glColor3ub(67.0f, 70.0f, 75.0f);
        glVertex2f(250, 140);
        glVertex2f(255, 140);
        glVertex2f(225, 178);
        glVertex2f(220, 178);
        glEnd();

        glBegin(GL_QUADS);
        glColor3ub(128, 140, 131);
        glVertex2f(230, 165);
        glVertex2f(230, 152);
        glVertex2f(246, 133);
        glVertex2f(246, 146);
        glEnd();

        glColor3ub(255, 0, 0);
        circle(233, 155, 3);
        glColor3ub(255, 255, 0);
        circle(238, 149, 3);
        glColor3ub(0, 255, 0);
        circle(243, 143, 3);
    }

    void trashcan() //C022
    {
        glBegin(GL_QUADS);
        glColor3ub(128, 140, 131);
        glVertex2f(100, 5);
        glVertex2f(110, 5);
        glVertex2f(115, 35);
        glVertex2f(95, 35);
        glEnd();
    }
    void trashbin() //C022_1
    {
        glMatrixMode(GL_MODELVIEW);
        trashcan();
        glPushMatrix();
        glTranslatef(290, 0, 0);
        trashcan();
        glPopMatrix();
    }
    void UmbrellaFrameLeft()
    {
        glBegin(GL_TRIANGLES); //p
        glColor3f(1, 1, 0);    // Yellow
        glVertex2f(250, 120);  // x, y
        glVertex2f(229, 70);   // x, y
        glVertex2f(250, 70);   // x, y
        glEnd();

        glBegin(GL_TRIANGLES); //p
        glColor3f(1, 0, 1);    // Purple
        glVertex2f(249, 120);  // x, y
        glVertex2f(209.0, 80); // x, y
        glVertex2f(230, 70);   // x, y
        glEnd();

        glBegin(GL_TRIANGLES); //p
        glColor3f(0, 1, 1);    // Red
        glVertex2f(249, 120);  // x, y
        glVertex2f(189, 90);   // x, y
        glVertex2f(210, 80);   // x, y
        glEnd();
    }
    void UmbrellaFrameRight()
    {
        glBegin(GL_TRIANGLES); //p
        glColor3f(0, 1, 0);    // Green
        glVertex2f(251, 120);  // x, y
        glVertex2f(251, 70);   // x, y
        glVertex2f(270, 70);   // x, y
        glEnd();

        glBegin(GL_TRIANGLES); //p
        glColor3f(0, 0, 1);    // Blue
        glVertex2f(251, 120);  // x, y
        glVertex2f(271, 70);   // x, y
        glVertex2f(290, 80);   // x, y
        glEnd();

        glBegin(GL_TRIANGLES); //p
        glColor3f(1, 0, 0);    // Red
        glVertex2f(251, 120);  // x, y
        glVertex2f(291, 80);   // x, y
        glVertex2f(310, 90);   // x, y
        glEnd();
    }
    void UmbrellaBody()
    {
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glScalef(0.6, 1, 0);
        glBegin(GL_POLYGON);  //Handle
        glColor3f(0, 0, 0);   // Red
        glVertex2f(249, 30);  // x, y
        glVertex2f(249, 130); // x, y
        glVertex2f(251, 130); // x, y
        glVertex2f(251, 30);  // x, y
        glEnd();
        UmbrellaFrameRight();
        UmbrellaFrameLeft();
        glPopMatrix();
    }
    void Umbrella() //C024
    {
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(285, -25, 0);
        UmbrellaBody();
        glTranslatef(-285, 25, 0);
        glTranslatef(-85, -25, 0);
        UmbrellaBody();
        glTranslatef(85, 25, 0);
        glPopMatrix();
    }
    void CityView() //C000
    {
        glMatrixMode(GL_MODELVIEW);
        glPushMatrix();
        glTranslatef(0, 10, 0);
        glPopMatrix();
        footpath();
        traffic();
        bench();
        bench2();
        trashbin();
        Umbrella();
        glFlush(); // Render now
    }
};




void displayCity() //C000
{
    CityScape obj;
    obj.CityView();
}

/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv)
{
    glutInit(&argc, argv); // Initialize GLUT
    glutInitWindowSize(640, 640);
    glutCreateWindow("Journey By Car Animation"); // Create a window with the given title
    gluOrtho2D(0, 500, 0, 500);
    glutFullScreen();
    glutDisplayFunc(displayCity);          // Register display callback handler for window re-paint


    glutMainLoop(); // Enter the event-processing loop
    return 0;
}
